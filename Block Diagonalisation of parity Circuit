import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import scipy as sp
import sys
from tqdm import tqdm

sys.path.append(r'C:\Users\danie\Documents\Random Quantum Circuits\Amos efficient code')

from Lib_gen import *

def qSwap(q):
    A=np.zeros((q**2,q**2))
    A[q**2-1][q**2-1]=1
    
    for b in range(q):
        for a in range(q-1):
            if b>a:
                A[a*q+b][b*q+a]=1
                A[b*q+a][a*q+b]=1
            if a==b:
                A[a*q+b][b*q+a]=1
    return A

def comp_basis(q):
    basis = []
    for i in range(q):
        arr = np.zeros(q)
        arr[i] = 1.0
        basis.append(np.array(arr))
    return basis

def numberToBase_Tcomp(n, q, t):
    #Rewrite an integer 'n' in base 10 in base 'q', represented by a list [a_t,a_{t-1},...,a_1]
    # and 'n' in base 10 is n = sum_{i=1}^{t} a_i q^{i-1}
    # Example: q=10,  then  (3,2,1) ==> 321
    if n == 0:
        return np.zeros(1,dtype=int)
    digits = np.zeros(t,dtype=int)
    i=t-1
    while n:
        digits[i]=int(n % q)
        n //= q
        i-=1
    if len(digits)>t:
        return print("dimension of n is bigger than specified dimension t")
    #output an array list n equiv [a_t,a_{t-1},...,a_1] in base q
    return digits

def shiftLeft(n,q,t):
    """shift to the left the digits of an integer n with t components in base q e.g. '0110'->'1100' """
    in_array=numberToBase_Tcomp(n,q,t)
    in_array=np.roll(in_array,-1)
    temp=''.join(str(i) for i in in_array)
    return int(temp,q), in_array  #reture both the shifted list and its form in base 10

def reflect_list(n,q,t):
    # reflecting a list [at,at-1,...,a2,a1] -> [a1,a2,...,at-1,at]
    in_array=numberToBase_Tcomp(n,q,t)
    in_array=np.flip(in_array)
    temp=''.join(str(i) for i in in_array)
    return int(temp,q), in_array  #reture both the shifted list and its form in base 10

def big_swap_matrix(q,t):
    #in the sparse2gate code we will transpose the matrix to use with the convention of q-bit numbers arranged as [at,at-1,...,a2,a1]
    data = np.ones(q**t)
    #print(data)
    ii = range(q**t) #ROW LABELs
    jj= [reflect_list(n, q, t)[0] for n in ii]  #swapping row index for column label index, it becomes [at,at-1,...,a2,a1] -> [a1,a2,...,at-1,at]
    return sparse.coo_matrix((data, (ii, jj)))

def block_diag_parity(q,t):
    odd_parity_basis_set=[]
    even_parity_basis_set=[]
    basis = comp_basis(q**t)
    R = big_swap_matrix(q,t)
    
    A_even = np.empty(q**t)
    A_odd = np.empty(q**t)
    
    for i in range(q**t):
        a = basis[i]
        Q = (R).dot(a)
        if (Q==a).all():
            newrow = np.zeros(q**t)
            newrow[i]=1.0
            A_even = numpy.vstack([A_even, newrow])
            even_parity_basis_set.append(a)
         
        else:
            for j in range(q**t):
                if (basis[j]==Q).all():
                    B=j
                    break
                else:
                    continue
            newrow = np.zeros(q**t)
            newrow[i] = 0.5
            newrow[B] = 0.5
            if len(even_parity_basis_set)>0:
                if np.any(np.all(newrow == even_parity_basis_set,axis=1)):
                    continue
                else:
                    A_even = numpy.vstack([A_even, newrow])

                    even_parity_basis_set.append(0.5*(a+Q))

                    newrow = np.zeros(q**t)
                    newrow[i] = 0.5
                    newrow[B] = -0.5
                    A_odd = numpy.vstack([A_odd, newrow])

                    odd_parity_basis_set.append(0.5*(a-Q))
            
    return A_even[1:], A_odd[1:], even_parity_basis_set, odd_parity_basis_set



